
                /// rows

                //
                int a = (rand()%3); Position aa; aa.location.row = a; aa.location.column = 0;
                int b = (rand()%3)+3; Position bb; aa.location.row = b; aa.location.column = 1;
                int c = (rand()%3)+6; Position cc; aa.location.row = c; aa.location.column = 2;
                int d = (rand()%3); Position dd; aa.location.row = d; aa.location.column = 3;
                int e = (rand()%3)+3; Position ee; aa.location.row = e; aa.location.column = 4;
                int f = (rand()%3)+6; Position ff; aa.location.row = f; aa.location.column = 5;
                int g = (rand()%3); Position gg; aa.location.row = g; aa.location.column = 6;
                int h = (rand()%3)+3; Position hh; aa.location.row = h; aa.location.column = 7;
                int i = (rand()%3)+6; Position ii; aa.location.row = i; aa.location.column = 8;

                int a;  Position aa; aa.location.column = 0;
                int b;  Position bb; aa.location.column = 1;
                int c;  Position cc; aa.location.column = 2;
                int d;  Position dd; aa.location.column = 3;
                int e;  Position ee; aa.location.column = 4;
                int f;  Position ff; aa.location.column = 5;
                int g;  Position gg; aa.location.column = 6;
                int h;  Position hh; aa.location.column = 7;
                int i;  Position ii; aa.location.column = 8;


                int tries = 0;
                int maxTries = 100;
                do {
                    a = (rand()%9); aa.location.row = a; 
                    b = (rand()%9); bb.location.row = b;
                    c = (rand()%9); cc.location.row = c;
                    d = (rand()%9); dd.location.row = d;
                    e = (rand()%9); ee.location.row = e;
                    f = (rand()%9); ff.location.row = f;
                    g = (rand()%9); gg.location.row = g;
                    h = (rand()%9); hh.location.row = h;
                    i = (rand()%9); ii.location.row = i;
                    tries++;
                } while (
                (
                // calculateBoxFromPosition(aa)!=0 || 
                // calculateBoxFromPosition(bb)!=3 || 
                // calculateBoxFromPosition(cc)!=6 ||
                // calculateBoxFromPosition(dd)!=1 ||
                // calculateBoxFromPosition(ee)!=4 ||
                // calculateBoxFromPosition(ff)!=7 ||
                // calculateBoxFromPosition(gg)!=2 ||
                // calculateBoxFromPosition(hh)!=5 ||
                // calculateBoxFromPosition(ii)!=8 ||
                solved[0][a].value.isValid ||
                solved[1][b].value.isValid ||
                solved[2][c].value.isValid ||
                solved[3][d].value.isValid ||
                solved[4][e].value.isValid ||
                solved[5][f].value.isValid ||
                solved[6][g].value.isValid ||
                solved[7][h].value.isValid ||
                solved[8][i].value.isValid) &&
                (tries < maxTries)
                ) 
                solved[0][a].value.isValid = 1; solved[0][a].value.value = z;
                solved[1][b].value.isValid = 1; solved[1][b].value.value = z;
                solved[2][c].value.isValid = 1; solved[2][c].value.value = z;
                solved[3][d].value.isValid = 1; solved[3][d].value.value = z;
                solved[4][e].value.isValid = 1; solved[4][e].value.value = z;
                solved[5][f].value.isValid = 1; solved[5][f].value.value = z;
                solved[6][g].value.isValid = 1; solved[6][g].value.value = z;
                solved[7][h].value.isValid = 1; solved[7][h].value.value = z;
                solved[8][i].value.isValid = 1; solved[8][i].value.value = z;
                if (tries>=maxTries){
                    attemptFailed = true;
                }
                printSolvedMatrix(std::cout);
            }